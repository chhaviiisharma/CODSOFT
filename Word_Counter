package CODSOFT;

	import java.io.BufferedReader;
	import java.io.FileReader;
	import java.io.IOException;
	import java.util.*;
	import java.util.regex.Pattern;

	public class WordCounter {
	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);

	        System.out.println("Welcome to the Word Counter!");
	        System.out.print("Enter text or provide a file name: ");
	        String userInput = scanner.nextLine();

	        String text = "";

	        if (userInput.isEmpty()) {
	            System.out.println("Input is empty. Exiting.");
	            scanner.close();
	            return;
	        }

	        try {
	            if (userInput.endsWith(".txt")) {
	                // Read text from a file
	                text = readTextFromFile(userInput);
	            } else {
	                // Use the provided text
	                text = userInput;
	            }

	            // Split the text into words using space and punctuation as delimiters
	            String[] words = splitTextIntoWords(text);

	            // Count the words
	            int wordCount = words.length;

	            // Display total word count
	            System.out.println("Total word count: " + wordCount);

	            // To ignore common words (stop words), create a list of them and filter the words array.
	            List<String> stopWords = Arrays.asList("the", "and", "is", "in", "to", "of", "a");
	            words = filterStopWords(words, stopWords);

	            // Display the word count after ignoring stop words
	            int nonStopWordCount = words.length;
	            System.out.println("Word count (excluding common words): " + nonStopWordCount);

	            // Count unique words and their frequency
	            Map<String, Integer> wordFrequency = countWordFrequency(words);

	            // Display unique word count
	            System.out.println("Number of unique words: " + wordFrequency.size());

	            // Display the frequency of each word
	            for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
	                System.out.println("Word: " + entry.getKey() + ", Frequency: " + entry.getValue());
	            }

	        } catch (IOException e) {
	            System.out.println("Error reading the file: " + e.getMessage());
	        }

	        scanner.close();
	    }

	    private static String readTextFromFile(String fileName) throws IOException {
	        StringBuilder text = new StringBuilder();
	        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
	            String line;
	            while ((line = reader.readLine()) != null) {
	                text.append(line).append(" ");
	            }
	        }
	        return text.toString();
	    }

	    private static String[] splitTextIntoWords(String text) {
	        // Split the text into words using space and punctuation as delimiters
	        return text.split("[\\s.,;!?]+");
	    }

	    private static String[] filterStopWords(String[] words, List<String> stopWords) {
	        return Arrays.stream(words)
	                .filter(word -> !stopWords.contains(word.toLowerCase()))
	                .toArray(String[]::new);
	    }

	    private static Map<String, Integer> countWordFrequency(String[] words) {
	        Map<String, Integer> wordFrequency = new HashMap<>();
	        for (String word : words) {
	            wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
	        }
	        return wordFrequency;
	    }
	}



